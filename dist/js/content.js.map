{"version":3,"file":"content.js","sources":["webpack:///webpack/bootstrap","webpack:///./src/CourseList/CourseList.js","webpack:///./src/CourseList/CourseListActive.js","webpack:///./src/CourseList/CourseListRecommended.js","webpack:///./src/RouteHelper.js","webpack:///./src/config.js","webpack:///./src/content.js","webpack:///./src/views/ViewHelpers.js","webpack:///./src/views/components/CoursePreview.js","webpack:///./src/views/components/CoursePreviewList.js","webpack:///./src/views/components/EmptyState.js","webpack:///./src/views/layots/Home.js","webpack:///./src/views/layots/Playlist.js","webpack:///./src/views/layots/PlaylistItems.js","webpack:///./src/views/layots/Video.js","webpack:///./src/views/layots/VideoCourseAction.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/content.js\");\n","/**\n * COURSE schema:\n * {\n *   id: <string>\n *   db_type: <string> - Possible values: `sync` or `local`, ONLY for CourseListActive\n * }\n */\n\nclass CourseList {\n  constructor(list=[]) {\n    this.items = list;\n  }\n\n  _copy(inpList) {\n    const list = inpList ? inpList : this.items;\n  \n    return list.map(el => {\n      return Object.assign({}, el);\n    });\n  }\n\n  getData() {\n    return this._copy();\n  }\n\n  _requestData(ids) {\n    return new Promise((resolve, reject) => {\n      chrome.runtime.sendMessage({ ids, action: 'getPlaylistInfo' }, (response) => {\n        const lastError = chrome.runtime.lastError;\n\n        if (lastError) {\n          reject(lastError.message);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  }\n\n  /**\n   * Extends courses with data\n   * from Youtube API DATA\n   */\n  extendsByYTData() {\n    const ids = this.items.map(element => element.id);\n\n    return new Promise((resolve, reject) => {\n      this._requestData(ids)\n        .then(playlists => {\n          this.items.forEach(item => {\n            var playlistsFounded = playlists.filter(pl => pl.id === item.id);\n\n            if(playlistsFounded.length) {\n              Object.assign(item, ...playlistsFounded);\n            }\n          });\n\n          resolve();\n        }).catch(error => reject(error));\n    });\n  }\n}\n\nexport default CourseList;","import { CONFIG, DB_TYPES, ERRORS } from './../config';\nimport CourseList from './CourseList';\n\n/**\n * Lifecycle of CourseListActive\n * \n * Change -> Update Local copy -> Update Storage\n * \n * extends COURSE schema by ACTIVE list:\n * {\n *   db_type: <string> - Possible values: `sync` or `local`\n * }\n */\nconst _DB_NAMES = {\n  local: 'courses',\n  sync: 'coursesSync'\n};\n\nclass CourseListActive extends CourseList {\n  constructor() {\n    super();\n\n    this.previousState = [];\n  }\n\n  /**\n   * Return is possible to save more courses or not\n   */\n  isMax() {\n    return this.items.length >= CONFIG.maxActiveCourses;\n  }\n\n  /**\n   * Return course or undefined\n   * @param {String} id - id of playlist / course\n   */\n  get(id) {\n    return this.items.find((item) => item.id === id);\n  }\n\n  _fetchByDBName(dbName, type) {\n    return new Promise((resolve, reject) => {\n      chrome.storage[type].get(dbName, result => {\n        if(chrome.runtime.lastError) {\n          reject({ error: chrome.runtime.lastError });\n        } else {\n          const responce = result[dbName];\n          const courses = responce && responce.length ? responce : [];\n\n          resolve(courses);\n        }\n      });\n    });\n  }\n\n  /**\n   * Return new (copy) of courses with field db_name={dbName}\n   * @param {Array} list \n   * @param {String} dbName \n   */\n  _markCoursesByDB(list, dbName) {\n    const courses = this._copy(list);\n\n    courses.forEach(el => {\n      el.db_type = dbName;\n    });\n\n    return courses;\n  }\n\n  /**\n   * The default set of courses\n   * for this list from the databases:\n   *  - local\n   *  - sync\n   */\n  fetch() {\n    return new Promise((resolve, reject) => {\n      const getSyncCourses = this._fetchByDBName(_DB_NAMES.sync, 'sync');\n      const getLocalCourses = this._fetchByDBName(_DB_NAMES.local, 'local');\n\n      Promise.all([getSyncCourses, getLocalCourses]).then(([sync, local]) => {\n        const syncCourses = this._markCoursesByDB(sync, DB_TYPES.sync);\n        const localCourses = this._markCoursesByDB(local, DB_TYPES.local);\n\n        const courses = syncCourses.concat(localCourses);\n        this.items = this._copy(courses);\n\n        resolve(this.items);\n      });\n    });\n  }\n\n  _saveSync(courses) {\n    return new Promise((resolve, reject) => {\n      chrome.storage.sync.set({[_DB_NAMES.sync]: courses}, () => {\n        if(chrome.runtime.lastError) {\n          reject(chrome.runtime.lastError);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  _saveLocal(courses) {\n    return new Promise((resolve, reject) => {\n      chrome.storage.local.set({[_DB_NAMES.local]: courses}, () => {\n        if(chrome.runtime.lastError) {\n          reject(chrome.runtime.lastError);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * To persist the state \n   * of a list to the database\n   */\n  _save() {\n    return new Promise((resolve, reject) => {\n      const courses = this._copy();\n\n      const syncCourses = courses.filter(el => el.db_type === 'sync');\n      const localCourses = courses.filter(el => el.db_type === 'local');\n\n      syncCourses.forEach(el => {\n        delete el.db_type;\n      });\n\n      localCourses.forEach(el => {\n        delete el.db_type;\n      });\n\n      const awaitSaves = [this._saveSync(syncCourses), this._saveLocal(localCourses)];\n\n      Promise.all(awaitSaves).then(responce => {\n        resolve();\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n  /**\n   * Add a course in YouTubeTutor\n   * @param {Object} params\n   * @param {String} params.id - id of playlist\n   */\n  add({id}) {\n    this.previousState = this._copy();\n\n    return new Promise((resolve, reject) => {\n      this._fill({id})\n        .then(course => {\n          const newCourse = this._markCoursesByDB([course], DB_TYPES.local)[0];\n          this.items.push(newCourse);\n\n          return this._save();\n        })\n        .then(() => resolve())\n        .catch(error => {\n          this._previousState();\n          reject(error);\n        });\n    });\n  }\n\n  makeSync(id) {\n    this.previousState = this._copy();\n\n    return new Promise((resolve, reject) => {\n      const courseIndex = this.items.findIndex((item) => item.id === id);\n      const course = Object.assign({}, this.items[courseIndex]);\n\n      course.db_type = 'sync';\n\n      this.items.forEach(el => {\n        el.db_type = 'local';\n      });\n\n      this.items.splice(courseIndex, 1, course);\n\n      this._save()\n        .then(() => resolve())\n        .catch(error => {\n          this._previousState();\n          reject(error);\n        });\n    });\n  }\n\n  /**\n   * Remove a course from YouTubeTutor\n   * @param {Object} params\n   * @param {String} params.id - id of playlist\n   */\n  remove({id}) {\n    this.previousState = this._copy();\n\n    return new Promise((resolve, reject) => {\n      this.items = this.items.filter(item => item.id !== id);\n\n      this._save()\n        .then(() => resolve())\n        .catch(error => {\n          this._previousState();\n          reject(error);\n        });\n    });\n  }\n\n  setLessonState(id, courseId, state) {\n    this._previousState = this._copy();\n\n    return new Promise((resolve, reject) => {\n      const courseIndex = this.items.findIndex((item) => item.id === courseId);\n      const course = this.items[courseIndex];\n\n      const lessonIndex = course.lessons.findIndex((item) => item.id === id);\n      const lesson = course.lessons[lessonIndex];\n\n      lesson.progress.state = state;\n\n      const isCourseFinished = course.lessons.every((lesson) => lesson.progress.state === 1);\n\n      if(isCourseFinished) {\n        this.remove({id: courseId})\n          .then(() => resolve())\n          .catch(error => {\n            this._previousState();\n            reject(error);\n          });\n      } else {\n        this.items.splice(courseIndex, 1, course);\n\n        this._save()\n          .then(() => resolve())\n          .catch(error => {\n            this._previousState();\n            reject(error);\n          });\n      }\n    });\n  }\n\n  handleGetPlaylistInfo(ids) {\n    return new Promise((resolve, reject) => {\n      chrome.runtime.sendMessage({ ids, action: 'getPlaylistInfo' }, (response) => {\n        console.log('handleGetPlaylistInfo', response);\n        const lastError = chrome.runtime.lastError;\n\n        if (lastError) {\n          reject(lastError.message);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  }\n\n  handleGetPlaylistItemsInfo(id) {\n    return new Promise((resolve, reject) => {\n      chrome.runtime.sendMessage({ id, action: 'getPlaylistItemsInfo' }, (response) => {\n        console.log('handleGetPlaylistItemsInfo', response);\n        const lastError = chrome.runtime.lastError;\n\n        if (lastError) {\n          reject(lastError.message);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  }\n\n  /**\n   * Load data from YouTube API\n   * @param {Object} course\n   * @param {String} course.id - id of playlist\n   */\n  _fill(course) {\n    return new Promise((resolve, reject) => {\n      const getInfoFromYoutube = [];\n\n      getInfoFromYoutube.push(this.handleGetPlaylistInfo([course.id]));\n      getInfoFromYoutube.push(this.handleGetPlaylistItemsInfo(course.id));\n      \n      Promise.all(getInfoFromYoutube)\n        .then(response => {\n          const [playlistsInfo, videosInfo] = response;\n          const playlistInfo = playlistsInfo[0];\n\n          Object.assign(course, {\n            channelId: playlistInfo.channelId,\n            channelTitle: playlistInfo.channelTitle,\n            description: playlistInfo.description,\n            id: playlistInfo.id,\n            publishedAt: playlistInfo.publishedAt,\n            title: playlistInfo.title,\n            thumbnails: playlistInfo.thumbnails\n          }, {lessons: []});\n\n          videosInfo.forEach((videoInfo, index) => {\n            const { snippet, contentDetails, status } = videoInfo;\n\n            if(status.privacyStatus !== 'private') {\n              let lesson = {\n                id: contentDetails.videoId,\n                position: snippet.position,\n                parentId: snippet.playlistId,\n                thumbnails: {\n                  standard: snippet.thumbnails.standard,\n                  maxres: snippet.thumbnails.maxres\n                },\n                progress: { \n                  state: 0\n                }\n              };\n            \n              course.lessons.push(lesson);\n            }\n          });\n\n          resolve(course);\n        }).catch(error => {\n          console.log('fill error', error);\n          reject({error: 'Can not load data from YouTube API'});\n        })\n    });\n  }\n\n  _previousState() {\n    this.items = this.previousState.slice();\n  }\n}\n\nexport default CourseListActive;","import CourseList from './CourseList';\n\nclass CourseListRecommended extends CourseList {\n  constructor(list) {\n    super(list);\n  }\n\n  _request(action) {\n    return new Promise((resolve, reject) => {\n      chrome.runtime.sendMessage({ action }, (response) => {\n        const lastError = chrome.runtime.lastError;\n\n        if (lastError) {\n          reject(lastError.message);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  }\n\n  handleGet() {\n    return new Promise((resolve, reject) => {\n      this._request('getCoursesMy')\n        .then((res) => resolve(res))\n        .catch((error) => reject(error));\n    });\n  }\n\n  /**\n   * The default set of recommended courses\n   * from the Github\n   */\n  fetch() {\n    return new Promise((resolve, reject) => {\n      this.handleGet()\n      .then((list) => {\n        this.items = list.items;\n        return this.extendsByYTData();\n      })\n      .then(() => {\n        resolve(this.items);\n      })\n      .catch(error => {\n        reject(error);\n      });\n    });\n  }\n}\n\nexport default CourseListRecommended;","import { PAGES } from './config';\n\n/**\n * Return route (URL)\n * and specific data from URL for each page.\n * \n * Index page: returns only pathname;\n * Playlist page: returns pathname, data.playlistId - id of playlist;\n * Watch page: returns pathname, data.id - id of playlist;\n * \n * @returns {object} route\n * @returns {string} route.pathname\n * @returns {object} route.data - specific data which parsing from URL\n * @returns {string} [route.data.playlistId]\n * @returns {string} [route.data.id] - id of video\n */\nexport default function getRouteFromURL() {\n  const route = {\n    data: {},\n    pathname: window.location.pathname\n  };\n\n  let params = (new URL(window.location)).searchParams;\n  const data = {};\n\n  switch(route.pathname) {\n    case PAGES.lesson:\n      data.id = params.get('v');\n      data.playlistId = params.get('list');\n  \n      break;\n\n    case PAGES.course:\n      data.playlistId = params.get('list');\n\n      break;\n  }\n\n  Object.assign(route.data, data);\n\n  return route;\n};","/**\n * All possible pages \n * for YouTubeTutor usage\n */\nexport const PAGES = {\n  home: '/',\n  course: '/playlist',\n  lesson: '/watch'\n};\n\nexport const CONFIG = {\n  version: '3.0.0',\n  recommendCoursesUrl: 'https://raw.githubusercontent.com/dimaspirit/YoutubeTutor/master/playlists.json',\n  maxActiveCourses: 4\n};\n\nexport const DB_TYPES = {\n  sync: 'sync',\n  local: 'local'\n};\n\nexport const COURSE_TYPES = {\n  default: 1,\n  recommended: 2\n};\n\nexport const COURSE_STATES = {\n  default: 1,\n  active: 2,\n  passed: 3\n};\n\nexport const YouTubeCONFIG = {\n  urls: {\n    playlists: 'https://www.googleapis.com/youtube/v3/playlists',\n    playlistItems: 'https://www.googleapis.com/youtube/v3/playlistItems'\n  }\n}\n\nexport const ERRORS = {\n  cannotStartWithoutInitLoad: `YouTubeTutor: Can't starting the app`,\n  ytCannotLoadPlaylists: `YouTubeTutor: Can't find / load playlist`,\n  ytPrivatePlaylist: 'YouTubeTutor: Requested playlist is private'\n}","\nimport { CONFIG, ERRORS, PAGES, COURSE_TYPES, COURSE_STATES, DB_TYPES } from './config';\nimport getRouteFromURL from './RouteHelper';\n\nimport CourseListActive from './CourseList/CourseListActive';\nimport CourseListRecommended from './CourseList/CourseListRecommended';\n\n/** VIEWS */\nimport Home from './views/layots/Home';\nimport Playlist from './views/layots/Playlist';\nimport PlaylistItems from './views/layots/PlaylistItems';\nimport Video from './views/layots/Video';\nimport VideoCourseAction from './views/layots/VideoCourseAction';\n\nclass Client {\n  constructor() {\n    this.user = {\n      isEnabled: true\n    };\n\n    const timeEnabled = 3600000; // 1 hours 3600000\n\n    chrome.storage.local.get(['yttDisabled'], (result) => {\n      const disabledTime = result['yttDisabled'];\n\n      if(disabledTime && ((Date.now() - disabledTime) < timeEnabled)) {\n        this.user.isEnabled = false;\n      }\n\n      if(this.user.isEnabled) {\n        // Set lister for messaging with backbground.js\n        chrome.runtime.onMessage.addListener(this.onMessage.bind(this));\n\n        this.activeCourses = new CourseListActive();\n        this.recommendedCourses = new CourseListRecommended();\n        \n        const loadInit = [];\n        loadInit.push(this.activeCourses.fetch());\n        loadInit.push(this.recommendedCourses.fetch());\n    \n        Promise.all(loadInit)\n          .then(() => {\n            this.route();\n          }).catch(error => {\n            console.error(error);\n          });\n      }\n    });\n  }\n\n  onMessage(request, sender, sendResponse) {\n    if(request.action === 'route') { this.route(); }\n  }\n\n  route() {\n    const self = this;\n    const route = getRouteFromURL();\n    \n    if(route.pathname === PAGES.home) {\n      const activeCourse = this.activeCourses.getData();\n      const recommendedCourses = this.recommendedCourses.getData();\n\n      // function handleSync(id) {\n      //   self.activeCourses.makeSync(id)\n      //     .then(() => {\n      //       self.route();\n      //     }).catch((error) => {\n      //       alert(error);\n      //       console.log(error);\n      //     })\n      // }\n \n      Home.render(recommendedCourses, activeCourse, {\n        switchoff: function() {\n          chrome.storage.local.set({'yttDisabled': Date.now()}, function() {\n            location.reload();\n          });\n        }\n      });\n    }\n\n    if(route.pathname === PAGES.course) {\n      const self = this;\n\n      const isMaxCoursesSavedAlready = this.activeCourses.isMax();\n      let course = this.activeCourses.get(route.data.playlistId);\n\n      const isSavedCourse = course ? true : false;\n\n      PlaylistItems.destroy();\n\n      if(!isSavedCourse) {\n        course = {\n          id: route.data.playlistId\n        };\n      } else {\n        PlaylistItems.render(course);\n      }\n\n      function handleError(error) {\n        console.error(error);\n        alert(JSON.stringify(error));\n      }\n\n      function handleResponce() {\n        self.route();\n      }\n\n      function handleAddCourse(id) {\n        self.activeCourses.add({id})\n          .then(handleResponce)\n          .catch(handleError);\n      }\n\n      function handleRemoveCourse(id) {\n        self.activeCourses.remove({id})\n          .then(handleResponce)\n          .catch(handleError);\n      }\n\n      Playlist.render(isMaxCoursesSavedAlready, course, isSavedCourse ? handleRemoveCourse : handleAddCourse);\n    }\n\n    if(route.pathname === PAGES.lesson && route.data.playlistId) {\n      let course = this.activeCourses.get(route.data.playlistId);\n\n      Video.destroy();\n      VideoCourseAction.destroy();\n\n      if(course) {\n        const self = this;\n        const lesson = course.lessons.find(el => el.id === route.data.id);\n\n        function toggleStateLesson({id, courseId, state}) {\n          self.activeCourses.setLessonState(id, courseId, state)\n            .then(() => {\n              self.route();\n            });\n        }\n\n        Video.render(lesson, toggleStateLesson);\n      } else {\n        const self = this;\n\n        function handleError(error) {\n          console.error(error);\n          alert(JSON.stringify(error));\n        }\n  \n        function handleResponce() {\n          self.route();\n        }\n  \n        function handleAddCourse(id) {\n          self.activeCourses.add({id})\n            .then(handleResponce)\n            .catch(handleError);\n        }\n\n        VideoCourseAction.render(route.data.playlistId, handleAddCourse);\n      }\n    }\n  }\n}\n\nconst app = new Client();","/**\n * Check out and return el when it will be render\n * @param {string} query - string containing CSS selector\n * \n * @example\n * const mountElClassName = '.mountEl';\n * \n * isRenderedDOMElement(mountElClassName).then((el) => {\n *  el.append('Your included html');\n * }).catch(() => {\n *  throw new Error('Element not found');\n * });\n */\nfunction isRenderedDOMElement(query) {\n  return new Promise( (resolve, reject) => {\n    const timeToWaiting = 10; // sec\n    let counter = 0;\n\n    let timerId = setInterval(() => {\n        let el = document.querySelector(query);\n\n        if(el) {\n            clearInterval(timerId);\n            resolve(el);\n        } else if(counter > timeToWaiting) {\n            clearInterval(timerId);\n            reject();\n        } else {\n            ++counter;\n        }\n    }, 1000);\n  });\n};\n\nexport { isRenderedDOMElement };","const CoursePreview = {\n  compose(course) {\n    let thumbnailUrl;\n    let elClassMod;\n\n    if(course.thumbnails.standard && course.thumbnails.standard.url) {\n      thumbnailUrl = course.thumbnails.standard.url;\n      elClassMod = 'standart';\n    } else if(course.thumbnails.medium && course.thumbnails.medium.url) {\n      thumbnailUrl = course.thumbnails.medium.url;\n      elClassMod = 'medium';\n    } else if(course.thumbnails.default && course.thumbnails.default.url) {\n      thumbnailUrl = course.thumbnails.default.url;\n      elClassMod = 'default';\n    } else {\n      thumbnailUrl = 'https://dummyimage.com/600x400/000/9100ff.png&text=No+image';\n      elClassMod = 'noone';\n    }\n\n    let elDOM = `\n      <div class=\"ytt-course_preview\">\n        <div class=\"ytt-course_preview__thumbnail ytt-course_preview__thumbnai--${elClassMod} \"\n          style=\"background-image: url(${thumbnailUrl})\">\n      `;\n\n      if(course.db_type) {\n        const isSync = course.db_type === 'sync' ? true : false;\n\n        elDOM += `\n          <button data-id=\"${course.id}\" \n            class=\"ytt-course_preview__db ${isSync ? 'ytt-course_preview__db-sync' : ''} j-ytt-sync\" >\n          </button>\n          `;\n      }\n\n    elDOM += `\n          <a class=\"ytt-course_preview__link\" \n            href=\"/playlist?list=${course.id}\"\n            title=\"Go to course page\"></a>\n        </div>\n\n        <div class=\"ytt-course_preview__details\">\n          <a class=\"ytt-course_preview__title\"\n            href=\"/playlist?list=${course.id}\">\n            ${course.title}\n          </a> by ${course.channelTitle}\n        `;\n\n    if(course.lessons && course.lessons.length) {\n      const firstUnpassedLesson = course.lessons.filter(el => el.progress.state === 0)[0];\n\n      if(firstUnpassedLesson) {\n        elDOM += `\n          <div class=\"course_preview_actions\">\n            <a class=\"ytt-link\" \n              href=\"/watch?v=${firstUnpassedLesson.id}&list=${firstUnpassedLesson.parentId}\">Up next lesson</a>\n          </div>\n        `;\n      }\n    }\n\n    elDOM += \n     `  </div>\n      </div>\n    `;\n\n    return elDOM;\n  }\n};\n\nexport default CoursePreview;","import CoursePreview from './CoursePreview';\nimport EmptyState from './../components/EmptyState';\n\nconst CoursePreviewList = {\n  compose({title, annotation, action}, courses) {\n    let elDOM = `\n      <div class=\"ytt-home__section\">\n        <div class='ytt-home__header'>\n          <h1 class='ytt-home__title'>YoutubeTutor / ${title}\n            <span class=\"ytt-home__annotation\">${annotation}</span>\n          </h1>\n    `;\n\n    if(action) {\n      elDOM += `\n          <div class=\"ytt-home__action\">\n            <button class=\"${action.className} ytt-link ytt-link-primary\">${action.content}</button> \n          </div>\n      `;\n    }\n\n    elDOM += `\n        </div>\n      <div class=\"ytt-home__content\">\n    `;\n\n    if(courses.length) {\n      courses.forEach(course => {\n        elDOM += CoursePreview.compose(course);\n      });\n    } else {\n      elDOM += EmptyState.compose();\n    }\n\n    elDOM += `\n        </div>\n      </div>\n    `;\n\n    return elDOM;\n  }\n}\n\nexport default CoursePreviewList;","const EmptyState = {\n  compose() {\n    return `\n      <div class=\"ytt-empty_state\">\n        <h4 class=\"ytt-empty_state__title\">There is no course to learn :(</h4>\n\n        <p>\n          Check out \n          <a class=\"ytt-link\" \n            href=\"http://dimaspirit.gitlab.io/YoutubeTutor\"\n            target=\"_blank\"\n            title=\"http://dimaspirit.gitlab.io/YoutubeTutor\">\n          YoutubeTutor site</a> to get more information about this Chrome extension.\n        </p>\n\n        <p>\n          To start using just go to a \n          <a class=\"ytt-link\"\n            href=\"/playlist?list=PL0zVEGEvSaeF_zoW9o66wa_UCNE3a7BEr\"\n            title=\"Unit testing in Javascript by Fun Fun Function\">\n          playlist page</a> and add to YoutubeTutor as a course\n          by clicking the button 'Add as a course to YoutubeTutor'.\n      </div>\n    `;\n  }\n};\n\nexport default EmptyState;","import { isRenderedDOMElement } from './../ViewHelpers';\nimport CoursePreviewList from '../components/CoursePreviewList';\n\nconst Home = {\n  containerClassName: `ytd-browse.ytd-page-manager[page-subtype='home']`,\n  wrapperClassName: 'ytt-home',\n\n  btnMakeSync: 'j-ytt-sync',\n  ui: {\n    btnSwitchOff: 'j-ytt-switch_off'\n  },\n\n  destroy() {\n    const elms = document.querySelectorAll(`.${this.wrapperClassName}`);\n\n    if(elms.length) {\n      [].forEach.call(elms, function(el) {\n        el.remove();\n      });\n    }\n  },\n\n  render(recommendedCourses, activeCourse, callbacks) {\n    isRenderedDOMElement(this.containerClassName)\n      .then((container) => {\n        this.destroy();\n\n        const composedDOM = this.compose(recommendedCourses, activeCourse);\n        container.insertAdjacentHTML('afterbegin', composedDOM);\n\n        container.addEventListener('click', (e) => {\n          const el = e.target;\n\n          if(el.classList.contains(this.ui.btnSwitchOff)) {\n            e.preventDefault();\n\n            callbacks.switchoff();\n          }\n\n          // if(el.classList.contains(this.btnMakeSync) && el.dataset.id) {\n          //   handleSync(el.dataset.id);\n          // }\n        })\n      });\n  },\n\n  compose(recommendedCourses, activeCourses) {\n    const self = this;\n\n    let elDOM = `\n      <div class=\"${this.wrapperClassName}\">`\n    \n    elDOM += CoursePreviewList.compose({\n      title: 'In progress courses',\n      annotation: 'These are the courses that you are learning now, max 4 active courses',\n      action: {\n        className: self.ui.btnSwitchOff,\n        content: 'Want just serf on YouTube?'\n      }\n    }, activeCourses);\n\n    elDOM += CoursePreviewList.compose({\n      title: 'Recommended courses',\n      annotation: 'List of quality-tested and recommended courses by a large number of users'\n    }, recommendedCourses);\n\n    elDOM += `\n      </div>`;\n\n    return elDOM;\n  }\n}\n\nexport default Home;\n","import { isRenderedDOMElement } from './../ViewHelpers';\n\nconst Playlist = {\n  containerClassName: '#menu.ytd-playlist-sidebar-primary-info-renderer',\n  wrapperClassName: 'ytt-course',\n\n  btnToggleCourseClassName: 'j-ytt-toggle-course_playlist',\n\n  destroy() {\n    const elms = document.querySelectorAll(`.${this.wrapperClassName}`);\n\n    if(elms.length) {\n      [].forEach.call(elms, function(el) {\n        el.remove();\n      });\n    }\n  },\n\n  _setListeners(fn, course) {\n    const btnsToggleCourse = document.querySelectorAll(`.${this.btnToggleCourseClassName}`);\n\n    if(btnsToggleCourse) {\n      Array.from(btnsToggleCourse).forEach(btn => {\n        btn.addEventListener('click', function(event) {\n          event.preventDefault();\n\n          Array.from(btnsToggleCourse).forEach(btn => {\n            btn.disabled = true;\n            btn.textContent = 'Loading...';\n          });\n\n          fn(course.id);\n        });\n      });\n    }\n  },\n\n  render(isMaxCoursesSavedAlready, course, toggleCourseFn) {\n    isRenderedDOMElement(this.containerClassName)\n      .then((container) => {\n        this.destroy();\n\n        const composedDOM = this._compose(isMaxCoursesSavedAlready, course);\n        container.insertAdjacentHTML('afterbegin', composedDOM);\n\n        this._setListeners(toggleCourseFn, course);\n      });\n  },\n\n  _compose(isMaxCoursesSavedAlready, course) {\n    const isCourseExisted = course.lessons && course.lessons.length ? true : false;\n\n    let elDOM = `\n      <div class=\"${this.wrapperClassName}\">`;\n\n    if(isMaxCoursesSavedAlready) {\n      elDOM += `\n        <p>YoutubeTutor says: You are have max courses already</p>`;\n\n      if(isCourseExisted) {\n        elDOM += `\n          <button class='${this.btnToggleCourseClassName} ytt-button'>\n            Remove the course from YoutubeTutor\n          </button>\n        `;\n      }\n    } else {\n      if(!isCourseExisted) {\n        elDOM += `\n          <button class=\"${this.btnToggleCourseClassName} ytt-button style-scope\" data-db=\"local\">\n            Save as a course to the YoutubeTutor\n          </button>\n        `;\n      } else {\n        elDOM += `\n          <button class='${this.btnToggleCourseClassName} ytt-button'>\n            Remove the course from YoutubeTutor\n          </button>\n        `;\n      }\n    }\n\n    elDOM += `\n      </div>`;\n\n    return elDOM;\n  }\n};\n\nexport default Playlist;","import { isRenderedDOMElement } from './../ViewHelpers';\n\nconst PlaylistItems = {\n  containerClassName: '#contents.ytd-playlist-video-list-renderer',\n  wrapperClassName: 'ytt-status',\n\n  destroy() {\n    const elms = document.querySelectorAll(`.${this.wrapperClassName}`);\n    \n    if(elms.length) {\n      [].forEach.call(elms, function(el) {\n        el.remove();\n      });\n    }\n  },\n\n  render(course) {\n    isRenderedDOMElement(this.containerClassName)\n      .then((container) => {\n        this.destroy();\n\n        const lessonsElms = container.querySelectorAll('.ytd-playlist-video-list-renderer');\n\n        course.lessons.forEach(lesson => {\n          let elLesson = lessonsElms[lesson.position];\n          let elDOM = `<div class=\"${this.wrapperClassName}\">`;\n\n          if(lesson && lesson.progress.state === 1) {\n            elDOM += `<img src=\"https://icongr.am/material/checkbox-marked-circle-outline.svg?color=888888\" />`;\n          } else {\n            elDOM += `<img src=\"https://icongr.am/material/checkbox-blank-circle-outline.svg?color=888888\" />`;\n          }\n\n          elDOM += `</div>`;\n          elLesson.insertAdjacentHTML('afterbegin', elDOM);\n        });\n      });\n  }\n};\n\nexport default PlaylistItems;","import { isRenderedDOMElement } from './../ViewHelpers';\n\nconst Video = {\n  containerClassName: 'ytd-video-primary-info-renderer.ytd-watch-flexy',\n  wrapperClassName: 'ytt-lesson',\n\n  btnToggleLessonClassName: 'ytt-change-state',\n\n  destroy() {\n    const elms = document.querySelectorAll(`.${this.wrapperClassName}`);\n\n    if(elms.length) {\n      [].forEach.call(elms, function(el) {\n        el.remove();\n      });\n    }\n  },\n\n  _setListeners(lesson, fn) {\n    const btnToggleLesson = document.querySelector(`.${this.btnToggleLessonClassName}`);\n\n    if(btnToggleLesson) {\n      btnToggleLesson.addEventListener('click', (e) => {\n        e.preventDefault();\n\n        btnToggleLesson.disabled = true;\n        btnToggleLesson.textContent = 'Loading...';\n\n        const params = {\n          id: lesson.id,\n          courseId: lesson.parentId,\n          state: lesson.progress.state === 0 ? 1 : 0\n        };\n\n        fn(params);\n      });\n    }\n\n  },\n\n  render(lesson, toggleLessonFn) {\n    isRenderedDOMElement(this.containerClassName)\n      .then((container) => {\n        this.destroy();\n\n        const composedDOM = this.compose(lesson);\n        container.insertAdjacentHTML('afterbegin', composedDOM);\n\n        this._setListeners(lesson, toggleLessonFn);\n      });\n  },\n\n  compose(lesson) {\n    let elDOM = `<div class=\"${this.wrapperClassName}\">`;\n\n    if(lesson.progress.state === 0) {\n      elDOM += `\n        <button class=\"ytt-button ${this.btnToggleLessonClassName}\">\n          Mark as passed\n        </button>`;\n    } else {\n      elDOM += `\n        <button class=\"ytt-button ${this.btnToggleLessonClassName}\">\n          Mark as NOT passed\n        </button>`;\n    }\n\n    elDOM += `</div>`;\n\n    return elDOM;\n  }\n};\n\nexport default Video;","import { isRenderedDOMElement } from './../ViewHelpers';\n\nconst VideoCourseAction = {\n  containerClassName: '#playlist-actions',\n  wrapperClassName: 'ytt-action_playlist_lesson',\n\n  btnToggleCourseClassName: 'j-ytt-toggle_course',\n\n  destroy() {\n    const elms = document.querySelectorAll(`.${this.wrapperClassName}`);\n\n    if(elms.length) {\n      [].forEach.call(elms, function(el) {\n        el.remove();\n      });\n    }\n  },\n\n  render(id, handleFn) {\n    isRenderedDOMElement(this.containerClassName)\n      .then((container) => {\n        this.destroy();\n\n        const composedDOM = this.compose();\n        container.insertAdjacentHTML('afterbegin', composedDOM);\n\n        const btnAddCourse = document.querySelector(`.${this.btnToggleCourseClassName}`);\n\n        if(btnAddCourse) {\n          btnAddCourse.addEventListener('click', (e) => {\n            e.preventDefault();\n\n            btnAddCourse.disabled = true;\n            btnAddCourse.textContent = 'Loading';\n            \n            handleFn(id);\n          });\n        }\n      });\n  },\n\n  compose() {\n    return `\n      <div class=${this.wrapperClassName}>\n        <button class=\"ytt-button ${this.btnToggleCourseClassName}\">\n          Add to YouTubeTutor\n        </button>\n      </div>\n    `;\n  }\n};\n\nexport default VideoCourseAction;"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClFA;;;;;;;AAQA;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;;;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChEA;AACA;AAEA;;;;;;;;;;;AAUA;AACA;AACA;AAFA;AACA;AAIA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AAHA;AAIA;AAEA;;;;;;;AAGA;AACA;AACA;AAEA;;;;;;;AAIA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;AAMA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAIA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAKA;AAAA;AACA;AADA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;;;;AAKA;AAAA;AACA;AADA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAKA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAQA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AARA;AAaA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;;AAhUA;AACA;AAkUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrVA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;;;;;;;AAIA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;AA9CA;AACA;AAgDA;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;AAcA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAVA;AACA;AAYA;AAEA;AACA;AAAA;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAIA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAFA;AADA;AAOA;AACA;AACA;AACA;AAHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtCA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAAA;AAmBA;AACA;AACA;AACA;AAtBA;AAwBA;AACA;AACA;AA1BA;AA4BA;AAAA;AAAA;AAGA;AACA;AAhCA;AAkCA;AAAA;AAAA;AAGA;AACA;AArCA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AATA;AACA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AAXA;AAaA;AAAA;AAAA;AAGA;AACA;AAhBA;AACA;AAgBA;AACA;AACA;AACA;;;;;;AAGA;;;;;;;;;;;;ACrKA;AAAA;AAAA;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;;;;;;;;;;;;AChCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAYA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAKA;AACA;AAnEA;AAsEA;;;;;;;;;;;;ACtEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AACA;AAKA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AArCA;AAwCA;;;;;;;;;;;;AC3CA;AAAA;AACA;AACA;AAsBA;AAxBA;AA2BA;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;AAHA;AASA;AACA;AACA;AAFA;AAKA;AAGA;AACA;AAnEA;AAsEA;;;;;;;;;;;;ACzEA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AAKA;AACA;AAKA;AACA;AACA;AACA;AAGA;AACA;AApFA;AAuFA;;;;;;;;;;;;ACzFA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnCA;AAsCA;;;;;;;;;;;;ACxCA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AAIA;AACA;AACA;AAEA;AACA;AApEA;AAuEA;;;;;;;;;;;;ACzEA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AA/CA;AAkDA;;;;A","sourceRoot":""}