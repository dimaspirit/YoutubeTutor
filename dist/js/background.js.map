{"version":3,"file":"background.js","sources":["webpack:///webpack/bootstrap","webpack:///./src/APIs/GitHubAPI.js","webpack:///./src/APIs/YouTubeAPI.js","webpack:///./src/background.js","webpack:///./src/config.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/background.js\");\n"," const GitHubAPI = {\n  getFile(url) {\n    return new Promise((resolve, reject) => {\n      fetch(url)\n        .then(function(response) {\n          return response.json();\n        }).then(function(fileRaw) {\n          resolve(fileRaw);\n        }).catch((error) => {\n          reject(error);\n        });\n    });\n  }\n};\n\nexport default GitHubAPI;","import { YouTubeCONFIG } from './../config';\n\nconst YouTubeAPI = {\n  /**\n   * Return snippet part of playlist information\n   * @param {Array} ids - Array of string of id playlist\n   */\n  getPlaylistInfo(ids) {\n    return new Promise((resolve, reject) => {\n      console.log('getPlaylistInfo', ids);\n      const url = YouTubeCONFIG.urls.playlists;\n      const params = new URLSearchParams();\n      params.append('id', ids.toString());\n      params.append('part', 'snippet,status');\n      params.append('maxResults', '50');\n      params.append('key', process.env.YOUTUBE_API_SECRET);\n  \n      fetch(`${url}?${params.toString()}`)\n        .then(responce => responce.json())\n        .then(responceParsed => {\n          let playlists = responceParsed.items.map(playlist => {\n            if(playlist.status.privacyStatus === 'public') {\n              const plInfo = Object.assign({}, playlist.snippet, {id: playlist.id});\n\n              return plInfo;\n            }\n          });\n\n          resolve(playlists);\n        }).catch(err => reject(err));\n    });\n  },\n  getPlaylistItemsInfo(id) {\n    console.log('getPlaylistItemsInfo', id);\n    return new Promise((resolve, reject) => {\n      const url = YouTubeCONFIG.urls.playlistItems;\n      const params = new URLSearchParams();\n  \n      params.append('playlistId', id);\n      params.append('part', 'snippet,contentDetails,status');\n      params.append('maxResults', '50');\n      params.append('key', process.env.YOUTUBE_API_SECRET);\n\n  \n      fetch(`${url}?${params.toString()}`)\n        .then(res =>  res.json())\n        .then(json => resolve(json.items))\n        .catch(err => reject(err)); \n      });\n    }\n  };\n  \n  export default YouTubeAPI;","import { CONFIG } from './config';\nimport GitHubAPI from './APIs/GitHubAPI';\nimport YouTubeAPI from './APIs/YouTubeAPI';\n\nclass App {\n  constructor() {\n    // Set listener for URL changing\n    chrome.webNavigation.onHistoryStateUpdated.addListener(this.onNavigate.bind(this));\n\n    const landingURL = 'https://dimaspirit.github.io/YoutubeTutor';\n\n    chrome.runtime.onInstalled.addListener(function(details) {\n      if(details.reason === 'install') {\n        chrome.tabs.create({'url': `${landingURL}/iamhappy`});\n      } else if(details.reason === 'update') {\n        chrome.tabs.create({ 'url': 'https://www.producthunt.com/posts/youtubetutor' });\n      }\n    });\n\n    chrome.runtime.setUninstallURL(`${landingURL}/iamsad`);\n\n    chrome.runtime.onMessage.addListener(this.onMessage.bind(this));\n  }\n\n  sendMessage(message) {\n    chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {\n      chrome.tabs.sendMessage(tabs[0].id, message);\n    });\n  }\n\n  onNavigate() {\n    this.sendMessage({'action': 'route'});\n  }\n\n  onMessage(request, sender, sendResponse) {\n    console.log('YouTubeTutor: Incoming message', JSON.stringify(request));\n\n    if(request.action === 'getCoursesMy') {\n      GitHubAPI.getFile(CONFIG.recommendCoursesUrl)\n        .then((courses) => sendResponse(courses));\n    }\n\n    if(request.action === 'getPlaylistInfo') {\n      YouTubeAPI.getPlaylistInfo(request.ids)\n        .then((playlists) => {\n          console.log('getPlaylistInfo res', playlists);\n          sendResponse(playlists)\n        });\n    }\n\n    if(request.action === 'getPlaylistItemsInfo') {\n      YouTubeAPI.getPlaylistItemsInfo(request.id)\n        .then((responce) => {\n          console.log('getPlaylistItemsInfo res', responce);\n          sendResponse(responce)\n        });\n    }\n\n    // Needed to make SendResponce async\n    return true;\n  }\n}\n\nconst app = new App();","/**\n * All possible pages \n * for YouTubeTutor usage\n */\nexport const PAGES = {\n  home: '/',\n  course: '/playlist',\n  lesson: '/watch'\n};\n\nexport const CONFIG = {\n  version: '3.0.0',\n  recommendCoursesUrl: 'https://raw.githubusercontent.com/dimaspirit/YoutubeTutor/master/playlists.json',\n  maxActiveCourses: 4\n};\n\nexport const DB_TYPES = {\n  sync: 'sync',\n  local: 'local'\n};\n\nexport const COURSE_TYPES = {\n  default: 1,\n  recommended: 2\n};\n\nexport const COURSE_STATES = {\n  default: 1,\n  active: 2,\n  passed: 3\n};\n\nexport const YouTubeCONFIG = {\n  urls: {\n    playlists: 'https://www.googleapis.com/youtube/v3/playlists',\n    playlistItems: 'https://www.googleapis.com/youtube/v3/playlistItems'\n  }\n}\n\nexport const ERRORS = {\n  cannotStartWithoutInitLoad: `YouTubeTutor: Can't starting the app`,\n  ytCannotLoadPlaylists: `YouTubeTutor: Can't find / load playlist`,\n  ytPrivatePlaylist: 'YouTubeTutor: Requested playlist is private'\n}"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClFA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;;;;;;;;;;;;ACfA;AAAA;AAAA;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AA/CA;AAkDA;;;;;;;;;;;;;;;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;;;;;;;;;;;;AC/DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAIA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAFA;AADA;AAOA;AACA;AACA;AACA;AAHA;;;;A","sourceRoot":""}